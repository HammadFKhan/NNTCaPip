function Ensemble = ensembleAnalysis(Spikes,ROI,ROIcentroid)
surrogate = 1000;
% Calculate threshold for coactive activations
disp(['Shuffling data ' num2str(surrogate) ' times to find optimal ensemble cutoff']);
shufSpikes = tempShuffle(Spikes,surrogate);
[coactive_cells,~] = coactive_index(Spikes,length(Spikes)/5);
[shufcoactive_cells,~] = coactive_index(shufSpikes,length(Spikes)/5);
bin = ceil(max(coactive_cells)*100);
figure,hold on,bar(coactive_cells),bar(shufcoactive_cells);
% figure,hold on,histogram(coactive_cells,100),histogram(shufcoactive_cells,100);
ensembleCan = find(coactive_cells>(2.5*std(shufcoactive_cells)+mean(shufcoactive_cells))); % 99% distribution threshold
disp(['Ensemble Candidates: ' num2str(length(ensembleCan))])
for i = 1:length(ensembleCan)
    ensemble(:,i) = Spikes(:,ensembleCan(i));
end
checkPadding = size(ensemble,1)-size(ensemble,2);
if checkPadding>0
    [vectorized,sim_index] = cosine_similarity(horzcat(ensemble,zeros(size(ensemble,1),checkPadding)),1);
    sim_index = sim_index(1:size(ensembleCan,2),1:size(ensembleCan,2));
else
    [vectorized,sim_index] = cosine_similarity(ensemble,1);
end

% Refine ensemble nodes based on similarity
thresh = .6;
[r,~] = find(tril(sim_index>thresh,-1));
while isempty(r) % Checks to see if we found any ensembles
    thresh = thresh-0.05;
    [r,~] = find(tril(sim_index>thresh,-1));
end
if thresh == 0.25 % returns function if thereshold is too low
    disp(['Weak ensembles detected at ' num2str(thresh*100) '% threshold']);
    warning('High false positives detected, stopping analysis...')
    Ensemble = [];
    return;
end
disp(['Ensembles detected at ' num2str(thresh*100) '% threshold']);
r = unique(r);
fEnsemble = find(diff(r)~=1)+1; % Find ensemble index location
if isempty(fEnsemble) % means there is only 1 ensemble with contineous index
    fEnsemble = length; % 1 ensemble that ends at index 3
    ensembleIndentified = 1;
else
    ensembleIndentified = 1 + length(fEnsemble);
end

for i = 1:ensembleIndentified
    % Once ensemble periods are detected find nodes
    if i == 1 
        ensembleId = ensemble(:,r(1:fEnsemble(i)-1)); % Idx ensemble position for the first seperation
    elseif i == ensembleIndentified && ensembleIndentified>1
        ensembleId = ensemble(:,r(fEnsemble(i-1):end)); % Idx ensemble position for last seperation
    else
        ensembleId = ensemble(:,r(fEnsemble(i-1):fEnsemble(i)-1)); % Idx ensemble position for all other seperation
    end
    
    corr = correlation_dice(ensembleId);
    thresh = 0.35;
    Connected_ROI{i} = Connectivity_dice(corr, ROI,thresh);
    [NumActiveNodes,NodeList{i},NumNodes{i},NumEdges{i},SpatialCentroid{i},SpatialCentroidVariance{i},...
        ActivityCentroid{i},ActivityCentroidVariance{i}]...
        = Network_Analysis(ROIcentroid,Connected_ROI{i});
end
Ensemble.ensemble = ensemble;
Ensemble.sim_index = sim_index;
Ensemble.NumActiveNodes = NumActiveNodes;
Ensemble.NodeList = NodeList;
Ensemble.NumNodes = NumNodes;
Ensemble.NumEdges = NumEdges;
Ensemble.SpatialCentroid = SpatialCentroid;
Ensemble.SpatialCentroidVariance = SpatialCentroidVariance;
Ensemble.ActivityCentroid = ActivityCentroid;
Ensemble.ActivityCentroidVariance = ActivityCentroidVariance;
Ensemble.ensembleIndentified = ensembleIndentified;
Ensemble.Connected_ROI =  Connected_ROI;
Ensemble.loc = r;
disp(['Ensembles Identified: ' num2str(ensembleIndentified)])
end



